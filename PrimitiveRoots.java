package com.company;

import java.util.Arrays;
import java.util.Scanner;

public class PrimitiveRoots {

    //function to check if primitive roots exist
    static boolean existence(int n)
    {
        boolean answer = false;
        //existence iff n =2,4,p^k or 2p^k where p is odd prime
        if(n ==2 || n==4)
            answer = true;

        //checks numbers between 100 to be odd-primes
        for(int p=1;p<=n;p++)
        {
            if(checkoddprime(p))
            {
                for(int k=0;k<20;k++)
                {
                    if(n == Math.pow(p,k) || n == (2*(Math.pow(p,k))))
                    {
                        answer = true;
                    }
                }
            }
        }
        return answer;
    }

    //function to check if number is odd-prime
    static boolean checkoddprime(int n)
    {
        if(checkodd(n) && checkprime(n))
            return true;
        else
            return  false;
    }
    //function to check odd numbers
    static boolean checkodd(int n)
    {
        if ( n % 2 == 0 )
            return false;
        else
            return true;
    }

    // function to check number is prime or not
    static boolean checkprime(int n)
    {
        boolean answer = false;
        int i,m=0,flag=0;

        m=n/2;
        if(n==0||n==1){
            answer = false;
        }
        else{
            for(i=2;i<=m;i++){
                if(n%i==0){
                    answer = false;
                    flag=1;
                    break;
                }
            }
            if(flag==0)
                answer = true;
        }
        return answer;
    }

    //function to check co-primes
    static boolean coprime(int a, int b) {
        boolean answer;

        if (gcd(a, b) == 1)
            answer = true;
        else
            answer = false;
        return answer;
    }

    //function to find gcd
    static int gcd(int a, int b)
    {
        // base case
        if (a == b)
            return a;

        // a is greater
        if (a > b)
            return gcd(a-b, b);

        return gcd(a, b-a);
    }

    //main function
    public static void primitiveroots_main()
    {
        //scan input value of p
        Scanner sc = new Scanner(System.in);
        System.out.println("\nTo find primitive roots of group <Zp*,x>\n\nEnter value of p: ");
        int p = sc.nextInt();
        System.out.println("Value of p: "+p);

        //check existence of primitive roots
        if(!existence(p))
        {
            System.out.println("Primitive roots do not exist for p = "+p);
            System.exit(0);
        }

        //array of size 25 with null values initially to store values of group zp old
        Integer zpo [] = new Integer[25];
        int count = 0;

        //generate values of group zp
        for(int i=1;i<p;i++)
        {
            if (coprime(i,p))
            {
                zpo[count] = i;
            }
            count++;
        }
        //remove empty values or zeros from array zp old to get actual zp
        count =0;
        for (Integer i : zpo) {
            if (i != null) {
                count++;
            }
        }
        Integer[] zp = new Integer[count];
        int index = 0;
        for (Integer i : zpo) {
            if (i != null) {
                zp[index++] = i;
            }
        }
        System.out.println("Zp: "+ Arrays.toString(zp));
        Integer output[] = new Integer[25];

        //Take individual numbers from zp and make an array of their powered values
        Integer individuals [] = new Integer[25];
        int b=0;

        //loop for taking values from zp one by one and generation of individual powered array
        for(int j=0;j<zp.length;j++)
        {
            int temp = zp[j];
            for(int k=0;k<zp.length;k++)
            {
                individuals[k] = ((int)Math.pow(temp,k))%p;
            }

            //Remove null values from individuals array
            count =0;
            for (Integer i : individuals) {
                if (i != null) {
                    count++;
                }
            }
            Integer[] individualsnew = new Integer[count];
            index = 0;
            for (Integer i : individuals) {
                if (i != null) {
                    individualsnew[index++] = i;
                }
            }
            //Arrays.sort(individuals);
            System.out.println("Cycle for "+zp[j]+" : "+Arrays.toString(individualsnew));
            //comparing elements generated by powers, with original array zp, if all elements of zp are in individuals, it is a primitive root
            //sort in ascending order
            Arrays.sort(individualsnew);
            if(Arrays.equals(individualsnew,zp))
            {
                output[b] = zp[j];
                b++;
            }
        }
        //Remove null values from output array
        count =0;
        for (Integer i : output) {
            if (i != null) {
                count++;
            }
        }
        Integer[] outputnew = new Integer[count];
        index = 0;
        for (Integer i : output) {
            if (i != null) {
                outputnew[index++] = i;
            }
        }
        System.out.println("\nPrimitive Roots are: "+Arrays.toString(outputnew));
    }
}
